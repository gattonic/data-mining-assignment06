from point import Point, Cluster, Omega
import math
import data as d
import numpy as np
import copy


def gaussian_distribution(x, mean, variance):
    exponent = (-1 / (2 * variance)) * ((x.value - mean) ** 2)
    reci = math.sqrt(2 * math.pi * variance)

    return (1 / reci) * math.exp(exponent)


def likelihood(x, omegas):
    sum = 0
    for o in omegas:
        sum += o.mixing_coefficients * gaussian_distribution(x, o.mean, o.variance)
    return sum


def get_cluster_of_point(point, clusters):
    for c in clusters:
        if point in c:
            return c

    raise Exception("Point is in no cluster")


def responsibility(x, cluster, clusters):
    enumerator = cluster.omega.mixing_coefficients * gaussian_distribution(x, cluster.omega.mean,
                                                                           cluster.omega.variance)

    denominator = 0
    for c in clusters:
        denominator += c.omega.mixing_coefficients * gaussian_distribution(x, c.omega.mean, c.omega.variance)

    return enumerator / denominator


def calculate_responsibilities(clusters, output=True):
    responsibilities = []
    for i in range(2):
        cur_cluster = clusters[i]
        probability_of_index = {}
        for p in d.data:
            probability_of_index[p] = responsibility(p, cur_cluster, clusters)
            if output:
                print("gamma({0})_{1} = {2}".format(p.name, i + 1, probability_of_index[p]))

        responsibilities.append(probability_of_index)

    return responsibilities


def main():
    cluster1 = d.cluster1
    cluster2 = d.cluster2
    clusters = [cluster1, cluster2]

    print("Initialization:")
    print("Cluster 1: {0}".format(cluster1))
    print("Cluster 2: {0}".format(cluster2))

    print("Calculate Omega:")
    omega = [cluster1.omega, cluster2.omega]
    print(omega)

    print("Likelihood:")
    likelihood_of_points = {}
    print("Likelihood, that these points have been generated by this model:")
    generated_likelihood = 1
    for p in d.data:
        likelihood_of_points[p] = likelihood(p, omega)
        generated_likelihood = generated_likelihood * likelihood_of_points[p]
        print("p(X={0}|O) = {1}".format(p.name, likelihood_of_points[p]))
    print("Probability that points were generated by this model: p(X|O)={0}".format(generated_likelihood))

    print("First Expectation step:")
    print("New responsibilities:")
    responsibilities = calculate_responsibilities(clusters)

    print("First Maximization step:")
    cluster1.do_m_step(responsibilities, clusters)
    cluster2.do_m_step(responsibilities, clusters)
    omega = [cluster1.omega, cluster2.omega]
    print("New Omega: {0}".format(omega))

    print("Second Expectation step:")
    print("New responsibilities")
    responsibilities = calculate_responsibilities(clusters)

    print("New partitioning of the clusters:")
    cluster1.update_points(responsibilities)
    cluster2.update_points(responsibilities)
    print("Cluster 1: {0}".format(cluster1))
    print("Cluster 2: {0}".format(cluster2))


if __name__ == "__main__":
    main()
