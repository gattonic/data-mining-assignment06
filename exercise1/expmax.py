from point import Point, Cluster, Omega
import math
import data as d
import numpy as np
import copy


def gaussian_distribution(x, mean, variance):
    exponent = (-1/(2*variance)) * ((x.value - mean) ** 2)
    reci = math.sqrt(2 * math.pi * variance)

    return (1/reci) * math.exp(exponent)


def likelihood(x, omegas):
    sum = 0
    for o in omegas:
        sum += o.mixing_coefficients * gaussian_distribution(x, o.mean, o.variance)
    return sum


def get_cluster_of_point(point, clusters):
    for c in clusters:
        if point in c:
            return c

    raise Exception("Point is in no cluster")


def responsibility(x, clusters):
    omega_of_x = get_cluster_of_point(x, clusters).omega
    enumerator = omega_of_x.mixing_coefficients * gaussian_distribution(x, omega_of_x.mean, omega_of_x.variance)

    denominator = 0
    for c in clusters:
        denominator += c.omega.mixing_coefficients * gaussian_distribution(x, c.omega.mean, c.omega.variance)

    return enumerator/denominator


def main():
    cluster1 = d.cluster1
    cluster2 = d.cluster2
    clusters = [cluster1, cluster2]

    print("Initialization:")
    print("Cluster 1: {0}".format(cluster1))
    print("Cluster 2: {0}".format(cluster2))

    print("Calculate Omega:")
    omega = [cluster1.omega, cluster2.omega]
    print(omega)

    print("Likelihood:")
    likelihood_of_points = {}
    print("Likelihood, that these points have been generated by this model:")
    for p in d.data:
        likelihood_of_points[p] = likelihood(p, omega)
        print("p(X={0},O) = {1}".format(p.name, likelihood_of_points[p]))

    print("First Expectation step:")
    print("New probabilities:")
    probabilities = {}
    for p in d.data:
        cluster_of_p = get_cluster_of_point(p, clusters).index
        probabilities[p] = responsibility(p, clusters)
        print("gamma({0})_{1} = {2}".format(p.name, cluster_of_p, probabilities[p]))

    print("First Maximization step")




if __name__ == "__main__":
    main()